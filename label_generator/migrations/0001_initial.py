# Generated by Django 5.2.7 on 2025-10-16 13:27

import django.db.models.deletion
import label_generator.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('data_sources', '0003_csvuploadlog_original_file'),
        ('label_templates', '0003_alter_labeltemplate_template_file'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LabelGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Уникальное название для этой генерации этикеток', max_length=255, verbose_name='Название генерации')),
                ('description', models.TextField(blank=True, help_text='Подробное описание генерации', null=True, verbose_name='Описание')),
                ('start_row', models.PositiveIntegerField(default=1, help_text='Номер строки, с которой начинать генерацию (1 - первая строка данных)', verbose_name='Начальная строка')),
                ('end_row', models.PositiveIntegerField(blank=True, help_text='Номер строки, на которой закончить генерацию (пусто - до конца)', null=True, verbose_name='Конечная строка')),
                ('labels_per_page', models.PositiveIntegerField(default=1, help_text='Количество этикеток на одной странице', verbose_name='Этикеток на страницу')),
                ('status', models.CharField(choices=[('pending', 'Ожидает'), ('processing', 'Обрабатывается'), ('completed', 'Завершено'), ('failed', 'Ошибка'), ('cancelled', 'Отменено')], default='pending', help_text='Текущий статус генерации', max_length=20, verbose_name='Статус')),
                ('progress_percent', models.PositiveIntegerField(default=0, help_text='Процент выполнения генерации', verbose_name='Прогресс (%)')),
                ('total_labels', models.PositiveIntegerField(default=0, help_text='Общее количество этикеток для генерации', verbose_name='Всего этикеток')),
                ('generated_labels', models.PositiveIntegerField(default=0, help_text='Количество уже сгенерированных этикеток', verbose_name='Сгенерировано')),
                ('output_file', models.FileField(blank=True, help_text='Сгенерированный файл с этикетками', null=True, upload_to=label_generator.models.generated_labels_upload_path, verbose_name='Результирующий файл')),
                ('log_file', models.FileField(blank=True, help_text='Файл с подробным логом генерации', null=True, upload_to=label_generator.models.generated_labels_upload_path, verbose_name='Файл лога')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания генерации', verbose_name='Дата создания')),
                ('started_at', models.DateTimeField(blank=True, help_text='Дата и время начала генерации', null=True, verbose_name='Дата начала')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Дата и время завершения генерации', null=True, verbose_name='Дата завершения')),
                ('error_message', models.TextField(blank=True, help_text='Описание ошибки, если генерация не удалась', null=True, verbose_name='Сообщение об ошибке')),
                ('created_by', models.ForeignKey(help_text='Пользователь, создавший генерацию', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Создатель')),
                ('data_source', models.ForeignKey(help_text='CSV файл с данными для генерации', on_delete=django.db.models.deletion.CASCADE, to='data_sources.csvuploadlog', verbose_name='Источник данных')),
                ('template', models.ForeignKey(help_text='Шаблон этикетки для генерации', on_delete=django.db.models.deletion.CASCADE, to='label_templates.labeltemplate', verbose_name='Шаблон')),
            ],
            options={
                'verbose_name': 'Генерация этикеток',
                'verbose_name_plural': 'Генерации этикеток',
                'ordering': ['-created_at'],
                'unique_together': {('name', 'created_by')},
            },
        ),
        migrations.CreateModel(
            name='GenerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(choices=[('debug', 'Отладка'), ('info', 'Информация'), ('warning', 'Предупреждение'), ('error', 'Ошибка'), ('critical', 'Критическая ошибка')], help_text='Уровень важности сообщения', max_length=20, verbose_name='Уровень')),
                ('message', models.TextField(help_text='Текст сообщения лога', verbose_name='Сообщение')),
                ('row_number', models.PositiveIntegerField(blank=True, help_text='Номер строки данных, к которой относится сообщение', null=True, verbose_name='Номер строки')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Время создания записи лога', verbose_name='Время')),
                ('generation', models.ForeignKey(help_text='Генерация, к которой относится лог', on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='label_generator.labelgeneration', verbose_name='Генерация')),
            ],
            options={
                'verbose_name': 'Запись лога',
                'verbose_name_plural': 'Записи логов',
                'ordering': ['generation', '-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='FieldMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_column_number', models.PositiveIntegerField(help_text='Номер столбца в CSV файле (начиная с 1)', verbose_name='Номер столбца данных')),
                ('data_column_name', models.CharField(blank=True, help_text='Название столбца в CSV файле', max_length=255, null=True, verbose_name='Название столбца')),
                ('is_required', models.BooleanField(default=False, help_text='Обязательно ли заполнение этого поля', verbose_name='Обязательное поле')),
                ('default_value', models.CharField(blank=True, help_text='Значение по умолчанию, если данные отсутствуют', max_length=255, null=True, verbose_name='Значение по умолчанию')),
                ('format_string', models.CharField(blank=True, help_text='Формат для преобразования данных (например, для дат)', max_length=255, null=True, verbose_name='Формат данных')),
                ('order', models.PositiveIntegerField(default=0, help_text='Порядок отображения в интерфейсе', verbose_name='Порядок')),
                ('template_field', models.ForeignKey(help_text='Поле в шаблоне этикетки', on_delete=django.db.models.deletion.CASCADE, to='label_templates.templatefield', verbose_name='Поле шаблона')),
                ('generation', models.ForeignKey(help_text='Генерация, к которой относится сопоставление', on_delete=django.db.models.deletion.CASCADE, related_name='field_mappings', to='label_generator.labelgeneration', verbose_name='Генерация')),
            ],
            options={
                'verbose_name': 'Сопоставление полей',
                'verbose_name_plural': 'Сопоставления полей',
                'ordering': ['generation', 'order', 'template_field'],
                'unique_together': {('generation', 'template_field')},
            },
        ),
    ]
