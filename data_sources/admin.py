from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from .models import CSVUploadLog, CSVData, CSVColumn


@admin.register(CSVUploadLog)
class CSVUploadLogAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∂—É—Ä–Ω–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–æ–≤
    """
    list_display = [
        'filename', 
        'author', 
        'upload_date', 
        'file_size', 
        'rows_count', 
        'columns_count', 
        'has_headers',
        'delimiter_display',
        'status',
        'download_link'
    ]
    list_filter = [
        'status', 
        'has_headers',
        'delimiter',
        'upload_date', 
        'author'
    ]
    search_fields = [
        'filename', 
        'author__username', 
        'author__first_name', 
        'author__last_name'
    ]
    readonly_fields = [
        'upload_date', 
        'file_size', 
        'rows_count', 
        'columns_count'
    ]
    
    def get_form(self, request, obj=None, **kwargs):
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        form = super().get_form(request, obj, **kwargs)
        
        # –î–ª—è –Ω–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–µ–ª–∞–µ–º –ø–æ–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏
        if not obj:
            form.base_fields['filename'].required = False
            form.base_fields['filename'].help_text = "–ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"
            
            form.base_fields['author'].required = False
            form.base_fields['author'].help_text = "–ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        
        return form
    ordering = ['-upload_date']
    
    fieldsets = (
        ('–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('filename', 'author', 'upload_date')
        }),
        ('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–∞', {
            'fields': ('file_size', 'rows_count', 'columns_count')
        }),
        ('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–∞', {
            'fields': ('has_headers', 'delimiter', 'original_file')
        }),
        ('–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
            'fields': ('status', 'error_message')
        }),
    )
    
    def save_model(self, request, obj, form, change):
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
        """
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–æ–¥–µ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        obj._current_user = request.user
        
        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not obj.author_id:
            obj.author = request.user
            
        super().save_model(request, obj, form, change)
    
    def response_change(self, request, obj):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π"""
        if "_auto_detect_delimiter" in request.POST:
            if not obj.original_file:
                messages.warning(request, "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è.")
            else:
                try:
                    detected_delimiter = obj.auto_detect_delimiter()
                    delimiter_names = {
                        ',': '–ó–∞–ø—è—Ç–∞—è',
                        ';': '–¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π',
                        '\t': '–¢–∞–±—É–ª—è—Ü–∏—è',
                        '|': '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞',
                        ' ': '–ü—Ä–æ–±–µ–ª',
                        ':': '–î–≤–æ–µ—Ç–æ—á–∏–µ',
                    }
                    delimiter_name = delimiter_names.get(detected_delimiter, detected_delimiter)
                    messages.success(request, f"–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: {delimiter_name}")
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è: {e}")
            return HttpResponseRedirect(request.path)
        
        if "_process_csv" in request.POST:
            if not obj.original_file:
                messages.warning(request, "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            else:
                try:
                    result = obj.process_csv_data()
                    messages.success(
                        request, 
                        f"CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ! "
                        f"–°—Ç—Ä–æ–∫: {result['rows_count']}, "
                        f"–°—Ç–æ–ª–±—Ü–æ–≤: {result['columns_count']}"
                    )
                except Exception as e:
                    messages.error(request, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞: {e}")
            return HttpResponseRedirect(request.path)
        
        return super().response_change(request, obj)
    
    def delimiter_display(self, obj):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ —É–¥–æ–±–Ω–æ–º –≤–∏–¥–µ"""
        delimiter_map = {
            ',': '–ó–∞–ø—è—Ç–∞—è',
            ';': '–¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π',
            '\t': '–¢–∞–±—É–ª—è—Ü–∏—è',
            '|': '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞',
            ' ': '–ü—Ä–æ–±–µ–ª',
            ':': '–î–≤–æ–µ—Ç–æ—á–∏–µ',
        }
        return delimiter_map.get(obj.delimiter, obj.delimiter)
    delimiter_display.short_description = '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å'
    
    def download_link(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        """
        if obj.original_file:
            download_url = reverse('data_sources:download_csv', args=[obj.id])
            return format_html(
                '<a href="{}" target="_blank">üì• –°–∫–∞—á–∞—Ç—å</a>',
                download_url
            )
        return "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    download_link.short_description = '–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª'


@admin.register(CSVData)
class CSVDataAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö CSV —Ñ–∞–π–ª–æ–≤
    """
    list_display = [
        'upload_log', 
        'row_number', 
        'column_number', 
        'column_name', 
        'cell_value_preview', 
        'created_at'
    ]
    list_filter = [
        'upload_log__filename', 
        'column_name', 
        'created_at'
    ]
    search_fields = [
        'cell_value', 
        'column_name', 
        'upload_log__filename'
    ]
    readonly_fields = ['created_at']
    ordering = ['upload_log', 'row_number', 'column_number']
    
    def cell_value_preview(self, obj):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏ (–ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)
        """
        return obj.cell_value[:50] + '...' if len(obj.cell_value) > 50 else obj.cell_value
    cell_value_preview.short_description = '–ó–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏ (–ø—Ä–µ–≤—å—é)'
    
    fieldsets = (
        ('–°–≤—è–∑—å —Å —Ñ–∞–π–ª–æ–º', {
            'fields': ('upload_log',)
        }),
        ('–ü–æ–∑–∏—Ü–∏—è –≤ —Ñ–∞–π–ª–µ', {
            'fields': ('row_number', 'column_number', 'column_name')
        }),
        ('–î–∞–Ω–Ω—ã–µ', {
            'fields': ('cell_value', 'created_at')
        }),
    )


@admin.register(CSVColumn)
class CSVColumnAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤ CSV —Ñ–∞–π–ª–æ–≤
    """
    list_display = [
        'upload_log', 
        'column_number', 
        'column_name', 
        'data_type', 
        'is_required',
        'created_at'
    ]
    list_filter = [
        'upload_log__filename', 
        'data_type',
        'is_required',
        'created_at'
    ]
    search_fields = [
        'column_name', 
        'original_name',
        'upload_log__filename',
        'description'
    ]
    readonly_fields = ['created_at']
    ordering = ['upload_log', 'column_number']
    
    fieldsets = (
        ('–°–≤—è–∑—å —Å —Ñ–∞–π–ª–æ–º', {
            'fields': ('upload_log',)
        }),
        ('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–ª–±—Ü–µ', {
            'fields': ('column_number', 'column_name', 'original_name')
        }),
        ('–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å—Ç–æ–ª–±—Ü–∞', {
            'fields': ('data_type', 'is_required', 'description')
        }),
        ('–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', {
            'fields': ('created_at',)
        }),
    )
